{"cells":[{"source":"<a href=\"https://www.kaggle.com/code/lazargugleta/mg-ml-genai-interview?scriptVersionId=260608738\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","execution_count":1,"id":"222e97f0","metadata":{"execution":{"iopub.execute_input":"2025-09-08T08:09:46.263746Z","iopub.status.busy":"2025-09-08T08:09:46.263547Z","iopub.status.idle":"2025-09-08T08:09:56.360281Z","shell.execute_reply":"2025-09-08T08:09:56.35962Z"},"id":"9w2UgSWR-GJ4","papermill":{"duration":10.101863,"end_time":"2025-09-08T08:09:56.361659","exception":false,"start_time":"2025-09-08T08:09:46.259796","status":"completed"},"tags":[]},"outputs":[],"source":["import polars\n","import torch\n","from dataclasses import dataclass\n","from huggingface_hub import login as hf_login\n","# from google.colab import userdata\n","from kaggle_secrets import UserSecretsClient\n","import io\n","from PIL import Image\n","import torch\n","from torchvision import transforms\n","from torchvision.models import resnet50\n","from torch.utils.data import Dataset, DataLoader\n","import torch.nn as nn\n","import torch.optim as optim\n","from sklearn.metrics import accuracy_score, classification_report, confusion_matrix, ConfusionMatrixDisplay\n","import matplotlib.pyplot as plt\n","import numpy as np\n","from typing import List\n","import sys\n","import logging\n","\n","# setting the logger\n","logger = logging.getLogger(__name__)\n","\n","# special for Kaggle\n","for handler in logging.root.handlers[:]:\n","    logging.root.removeHandler(handler)\n","logging.basicConfig(stream = sys.stdout, level=logging.INFO)\n","\n","logger.setLevel(logging.INFO)"]},{"cell_type":"code","execution_count":2,"id":"f245f613","metadata":{"execution":{"iopub.execute_input":"2025-09-08T08:09:56.368102Z","iopub.status.busy":"2025-09-08T08:09:56.367774Z","iopub.status.idle":"2025-09-08T08:09:56.371643Z","shell.execute_reply":"2025-09-08T08:09:56.371109Z"},"id":"X8G08WWvDHtf","papermill":{"duration":0.007988,"end_time":"2025-09-08T08:09:56.372743","exception":false,"start_time":"2025-09-08T08:09:56.364755","status":"completed"},"tags":[]},"outputs":[],"source":["def login_hf(hf_token: str):\n","  \"\"\"\n","  Helper function to log in Huggingface with proper error handling.\n","  \"\"\"\n","\n","  if hf_token is not None: # clear setting of case checking\n","      hf_login(hf_token)\n","      logger.info(\"Successfully logged in to Hugging Face!\")  # I would use a logging function of python in production to control levels of information\n","  else:\n","      logger.exception(\"Token is not set. Please save the token first.\") # clear message and letting know the user the issue"]},{"cell_type":"markdown","id":"3a675ec8","metadata":{"id":"kKA3FQ3hvGAM","papermill":{"duration":0.00222,"end_time":"2025-09-08T08:09:56.377505","exception":false,"start_time":"2025-09-08T08:09:56.375285","status":"completed"},"tags":[]},"source":["## Preprocessing steps"]},{"cell_type":"code","execution_count":3,"id":"f8f52425","metadata":{"execution":{"iopub.execute_input":"2025-09-08T08:09:56.383204Z","iopub.status.busy":"2025-09-08T08:09:56.382981Z","iopub.status.idle":"2025-09-08T08:09:56.394514Z","shell.execute_reply":"2025-09-08T08:09:56.393954Z"},"id":"GCaIxblnk9qc","papermill":{"duration":0.015671,"end_time":"2025-09-08T08:09:56.395493","exception":false,"start_time":"2025-09-08T08:09:56.379822","status":"completed"},"tags":[]},"outputs":[],"source":["def get_df_split() -> List[polars.DataFrame]:\n","  \"\"\"\n","  This could be further improved by setting percentage parameter between\n","  train/validation split. No need here as dataset is prepared by huggingface.\n","  We should always put return types.\n","  \"\"\"\n","  splits = {'train': 'data/train-*.parquet', 'validation': 'data/validation-*.parquet'}\n","  df_train = polars.read_parquet('hf://datasets/ethz/food101/' + splits['train'])\n","  df_validation = polars.read_parquet('hf://datasets/ethz/food101/' + splits['validation'])\n","  return [df_train, df_validation]\n","\n","\n","def _unnest_and_select_columns(df_train: polars.DataFrame, df_validation: polars.DataFrame) -> List[polars.DataFrame]:\n","  df_train_preprocessed = df_train.unnest('image')\n","  df_validation_preprocessed = df_validation.unnest('image')\n","  df_train_preprocessed = df_train_preprocessed.select(\n","      polars.col('bytes'),\n","      # considered categorical also, but not suitable for ML usage\n","      polars.col('label').cast(polars.Int8)\n","  )\n","  df_validation_preprocessed = df_validation_preprocessed.select(\n","      polars.col('bytes'),\n","      polars.col('label').cast(polars.Int8)\n","  )\n","  return [df_train_preprocessed, df_validation_preprocessed]\n","\n","def _downsample_df(df, n_samples) -> polars.DataFrame:\n","  \"\"\"\n","  Downsample polars dataframe to a certain number of samples.\n","\n","  Perfect example of a testable function.\n","  Does one thing with clearly set parameters.\n","  We want to test behaviour so writing test names clearly can improve code clarity.\n","  Method can be extended to choose which classes to leave in.\n","  \"\"\"\n","  downsampled_dfs = []\n","  for label in range(1, 6):  # First five classes just for this example\n","      class_df = df.filter(polars.col(\"label\") == label)\n","      sampled_class_df = class_df.sample(n=n_samples)\n","      downsampled_dfs.append(sampled_class_df)\n","  return polars.concat(downsampled_dfs)\n","\n","\n","class PolarsImageDataset(Dataset):\n","  \"\"\"\n","  Make a class based on DataSet parent class, extended with functions to\n","  make polars work with this model.\n","  Also possible to use to_torch() method if dataframe is set up properly before.\n","  \"\"\"\n","  def __init__(self, polars_df):\n","      self.df = polars_df\n","      self.images = polars_df[\"bytes\"].to_list()\n","      self.labels = polars_df[\"label\"].to_list()\n","      self.resize_and_normalize = transforms.Compose([\n","          transforms.Resize((224, 224)),\n","          transforms.ToTensor(),\n","          transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\n","      ])\n","\n","  def _binary_to_tensor(self, binary_data):\n","    image = Image.open(io.BytesIO(binary_data)).convert('RGB')\n","    return self.resize_and_normalize(image)\n","\n","  def __len__(self):\n","      return len(self.df)\n","\n","  def __getitem__(self, idx):\n","      image_tensor = self._binary_to_tensor(self.images[idx])\n","      label = self.labels[idx] - 1  # Convert to 0-indexed if needed\n","      return image_tensor, label\n","\n","\n","def _create_polars_image_datasets(df_train: polars.DataFrame, df_validation: polars.DataFrame) -> List[PolarsImageDataset]:\n","  train_dataset = PolarsImageDataset(df_train)\n","  test_dataset = PolarsImageDataset(df_validation)\n","  return [train_dataset, test_dataset]\n","\n","\n","def _create_dataloaders(train_dataset: PolarsImageDataset, test_dataset: PolarsImageDataset, batch_size: polars.Int32) -> List[DataLoader]:\n","  train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)\n","  test_loader = DataLoader(test_dataset, batch_size=batch_size, shuffle=False)\n","  return [train_loader, test_loader]\n","\n","\n","def preprocessing(df_train: polars.DataFrame, df_validation: polars.DataFrame, batch_size: polars.Int32) -> List[DataLoader]:\n","  \"\"\"\n","  Steps taken to preprocess are that image field is a struct so it should be\n","  unnested and label is integer64 for 101 classes hence we can also reduce the\n","  memory it takes to store it.\n","  We leave path field out after unnesting.\n","  This function is like an abstraction of underlying preprocessing steps.\n","  \"\"\"\n","\n","  df_train_preprocessed, df_validation_preprocessed = _unnest_and_select_columns(df_train, df_validation)\n","\n","  df_train_downsampled = _downsample_df(df_train_preprocessed, 750)\n","  df_validation_downsampled = _downsample_df(df_validation_preprocessed, 250)\n","\n","  train_dataset, test_dataset = _create_polars_image_datasets(df_train_downsampled, df_validation_downsampled)\n","  train_loader, test_loader = _create_dataloaders(train_dataset, test_dataset, batch_size=64)\n","\n","  return [train_loader, test_loader]"]},{"cell_type":"markdown","id":"df1c38d0","metadata":{"id":"PLB8oebVDXUd","papermill":{"duration":0.002136,"end_time":"2025-09-08T08:09:56.399959","exception":false,"start_time":"2025-09-08T08:09:56.397823","status":"completed"},"tags":[]},"source":["## Configure and train model"]},{"cell_type":"code","execution_count":4,"id":"bc5b9cb5","metadata":{"execution":{"iopub.execute_input":"2025-09-08T08:09:56.405639Z","iopub.status.busy":"2025-09-08T08:09:56.405432Z","iopub.status.idle":"2025-09-08T08:09:56.495655Z","shell.execute_reply":"2025-09-08T08:09:56.494868Z"},"id":"CaTbp4_MQrqm","papermill":{"duration":0.094537,"end_time":"2025-09-08T08:09:56.496793","exception":false,"start_time":"2025-09-08T08:09:56.402256","status":"completed"},"tags":[]},"outputs":[],"source":["@dataclass\n","class ModelConfiguration:\n","    \"\"\"Configuration for model training\"\"\"\n","    model_name: str = \"resnet50\"\n","    num_classes: int = 5\n","    weights: str = \"IMAGENET1K_V1\"\n","    learning_rate: float = 0.001\n","    weight_decay: float = 0.000\n","    optimizer_class: type = optim.Adam\n","    criterion_class: type = nn.CrossEntropyLoss\n","    device: str = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n","    \n","\n","def _create_pretrained_resnet50_model_and_components(model_config: ModelConfiguration):\n","  \"\"\"\n","  Use a pre-trained model and fine tune on our prepared dataset.\n","\n","  Good name for a function is it's best documentation:\n","  https://www.oreilly.com/library/view/the-rules-of/9781098133108/ch03.html\n","  \"\"\"\n","  if model_config.model_name == \"resnet50\":\n","    model = resnet50(weights=model_config.weights)\n","    num_features = model.fc.in_features\n","    model.fc = nn.Linear(num_features, model_config.num_classes)\n","  else:\n","    raise ValueError(f\"Unsupported model: {model_config.model_name}\")\n","\n","  device = torch.device(model_config.device)\n","  model = model.to(device)\n","  criterion = model_config.criterion_class()\n","  optimizer = model_config.optimizer_class(model.parameters(), lr=model_config.learning_rate, weight_decay=model_config.weight_decay)\n","  return device, model, criterion, optimizer\n","\n","def train_model(model_config: ModelConfiguration, train_loader,/,*, num_epochs=20):\n","  \"\"\"\n","  Training a model in a certain number of epochs.\n","\n","  At first I was passing all return parameters of _create_pretrained_resnet50_model_and_components\n","  throughout the pipeline but that does not make sense as it is making code less readable.\n","  Solution here is to make a configuration class to keep track of all model settings.\n","  Could be improved further to have train and evaluate methods part of a bigger class.\n","  \"First make it work, make it right, then make it fast\".\n","  \"\"\"\n","  device, model, criterion, optimizer = _create_pretrained_resnet50_model_and_components(model_config)\n","    \n","  for epoch in range(num_epochs):\n","    model.train()\n","    running_loss = 0.0\n","    for i, (inputs, labels) in enumerate(train_loader):\n","        inputs, labels = inputs.to(device), labels.to(device)\n","\n","        optimizer.zero_grad()\n","        outputs = model(inputs)\n","        loss = criterion(outputs, labels)\n","        loss.backward()\n","        optimizer.step()\n","\n","        running_loss += loss.item()\n","\n","    logger.info(f\"Epoch {epoch+1}, Loss: {running_loss/len(train_loader):.4f}\")\n","      \n","  return model\n","\n","def evaluate_model(model, test_loader: DataLoader):\n","  \"\"\"\n","  Calculate accuracy, recall and f1 scores based on the validation set using\n","  the trained model.\n","  \"\"\" \n","    \n","  device = next(model.parameters()).device\n","  model.eval()\n","  all_preds = []\n","  all_labels = []\n","\n","  with torch.no_grad():\n","      for inputs, labels in test_loader:\n","          inputs, labels = inputs.to(device), labels.to(device)\n","          outputs = model(inputs)\n","          _, preds = torch.max(outputs, 1)\n","\n","          all_preds.extend(preds.cpu().numpy())\n","          all_labels.extend(labels.cpu().numpy())\n","\n","  accuracy = accuracy_score(all_labels, all_preds)\n","  logger.info(f\"Test Accuracy: {accuracy:.4f}\")\n","  logger.info(classification_report(all_labels, all_preds))\n","  return accuracy, all_preds, all_labels"]},{"cell_type":"markdown","id":"9de121f7","metadata":{"id":"PErHgUGeWrsy","papermill":{"duration":0.002167,"end_time":"2025-09-08T08:09:56.501497","exception":false,"start_time":"2025-09-08T08:09:56.49933","status":"completed"},"tags":[]},"source":["## Run the prototype"]},{"cell_type":"code","execution_count":5,"id":"db58f157","metadata":{"execution":{"iopub.execute_input":"2025-09-08T08:09:56.507021Z","iopub.status.busy":"2025-09-08T08:09:56.506802Z","iopub.status.idle":"2025-09-08T08:09:56.510839Z","shell.execute_reply":"2025-09-08T08:09:56.510341Z"},"id":"krCf_JPkpqp_","papermill":{"duration":0.007987,"end_time":"2025-09-08T08:09:56.511796","exception":false,"start_time":"2025-09-08T08:09:56.503809","status":"completed"},"tags":[]},"outputs":[],"source":["def main():\n","  \"\"\"\n","  Abstraction of all methods with clear modular steps.\n","  It can be improved further.\n","  \"\"\"\n","  user_secrets = UserSecretsClient()\n","  HF_TOKEN=user_secrets.get_secret(\"HF_TOKEN\")\n","  login_hf(HF_TOKEN)\n","  df_train, df_validation = get_df_split()\n","  train_loader, test_loader = preprocessing(df_train, df_validation, batch_size=64)\n","  model_config = ModelConfiguration(num_classes=5, learning_rate=0.001)\n","  # device, model, criterion, optimizier = create_pretrained_resnet50_model_and_components()\n","  trained_model = train_model(model_config, train_loader, num_epochs=20)\n","  accuracy, all_preds, all_labels = evaluate_model(trained_model, test_loader)\n","  return accuracy, all_preds, all_labels"]},{"cell_type":"code","execution_count":6,"id":"06bcec51","metadata":{"execution":{"iopub.execute_input":"2025-09-08T08:09:56.517339Z","iopub.status.busy":"2025-09-08T08:09:56.517107Z","iopub.status.idle":"2025-09-08T08:29:24.39764Z","shell.execute_reply":"2025-09-08T08:29:24.397031Z"},"id":"ZbT-s0I8spJb","outputId":"a73ecad2-bf2f-4213-8d42-d1170033a9c3","papermill":{"duration":1167.884809,"end_time":"2025-09-08T08:29:24.399018","exception":false,"start_time":"2025-09-08T08:09:56.514209","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["INFO:__main__:Successfully logged in to Hugging Face!\n"]},{"name":"stderr","output_type":"stream","text":["Downloading: \"https://download.pytorch.org/models/resnet50-0676ba61.pth\" to /root/.cache/torch/hub/checkpoints/resnet50-0676ba61.pth\n","100%|██████████| 97.8M/97.8M [00:00<00:00, 215MB/s]\n"]},{"name":"stdout","output_type":"stream","text":["INFO:__main__:Epoch 1, Loss: 0.8100\n","INFO:__main__:Epoch 2, Loss: 0.5248\n","INFO:__main__:Epoch 3, Loss: 0.3953\n","INFO:__main__:Epoch 4, Loss: 0.3394\n","INFO:__main__:Epoch 5, Loss: 0.2375\n","INFO:__main__:Epoch 6, Loss: 0.3080\n","INFO:__main__:Epoch 7, Loss: 0.2057\n","INFO:__main__:Epoch 8, Loss: 0.1434\n","INFO:__main__:Epoch 9, Loss: 0.1440\n","INFO:__main__:Epoch 10, Loss: 0.1168\n","INFO:__main__:Epoch 11, Loss: 0.1314\n","INFO:__main__:Epoch 12, Loss: 0.0773\n","INFO:__main__:Epoch 13, Loss: 0.1164\n","INFO:__main__:Epoch 14, Loss: 0.1383\n","INFO:__main__:Epoch 15, Loss: 0.0821\n","INFO:__main__:Epoch 16, Loss: 0.0696\n","INFO:__main__:Epoch 17, Loss: 0.0884\n","INFO:__main__:Epoch 18, Loss: 0.0809\n","INFO:__main__:Epoch 19, Loss: 0.0537\n","INFO:__main__:Epoch 20, Loss: 0.0303\n","INFO:__main__:Test Accuracy: 0.8768\n","INFO:__main__:              precision    recall  f1-score   support\n","\n","           0       0.91      0.91      0.91       250\n","           1       0.93      0.94      0.93       250\n","           2       0.86      0.84      0.85       250\n","           3       0.83      0.87      0.85       250\n","           4       0.85      0.82      0.84       250\n","\n","    accuracy                           0.88      1250\n","   macro avg       0.88      0.88      0.88      1250\n","weighted avg       0.88      0.88      0.88      1250\n","\n"]}],"source":["accuracy, all_preds, all_labels = main()"]},{"cell_type":"markdown","id":"5cb4c0d0","metadata":{"id":"eYWMxw7hm7JP","papermill":{"duration":0.003469,"end_time":"2025-09-08T08:29:24.406405","exception":false,"start_time":"2025-09-08T08:29:24.402936","status":"completed"},"tags":[]},"source":["## Analyze results per each class"]},{"cell_type":"code","execution_count":7,"id":"86664b67","metadata":{"execution":{"iopub.execute_input":"2025-09-08T08:29:24.414675Z","iopub.status.busy":"2025-09-08T08:29:24.414142Z","iopub.status.idle":"2025-09-08T08:29:25.717438Z","shell.execute_reply":"2025-09-08T08:29:25.716739Z"},"id":"xKQa_CQk4iz6","papermill":{"duration":1.308941,"end_time":"2025-09-08T08:29:25.718803","exception":false,"start_time":"2025-09-08T08:29:24.409862","status":"completed"},"tags":[]},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 1000x800 with 2 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["def create_confusion_matrix(all_preds, all_labels):\n","  cm = confusion_matrix(all_labels, all_preds)\n","\n","  disp = ConfusionMatrixDisplay(cm)\n","  fig, ax = plt.subplots(figsize=(10, 8))\n","  disp.plot(ax=ax, cmap='Blues', values_format='d')\n","  plt.xticks(rotation=45)\n","  plt.title('Confusion Matrix')\n","  plt.tight_layout()\n","  plt.savefig('confusion_matrix.png', dpi=300, bbox_inches='tight')\n","  plt.show()\n","\n","create_confusion_matrix(all_preds, all_labels)"]},{"cell_type":"markdown","id":"3768049f","metadata":{"id":"ea4ykWBFmg_6","papermill":{"duration":0.004136,"end_time":"2025-09-08T08:29:25.727882","exception":false,"start_time":"2025-09-08T08:29:25.723746","status":"completed"},"tags":[]},"source":["## Hyperparameter tuning"]},{"cell_type":"code","execution_count":8,"id":"8602507c","metadata":{"execution":{"iopub.execute_input":"2025-09-08T08:29:25.737378Z","iopub.status.busy":"2025-09-08T08:29:25.737108Z","iopub.status.idle":"2025-09-08T08:29:25.742796Z","shell.execute_reply":"2025-09-08T08:29:25.742279Z"},"id":"hMS9ldTciRFn","papermill":{"duration":0.011777,"end_time":"2025-09-08T08:29:25.743888","exception":false,"start_time":"2025-09-08T08:29:25.732111","status":"completed"},"tags":[]},"outputs":[],"source":["def hyperparameter_tuning():\n","  \"\"\"\n","  To optimize model parameters we use hypertuning technique\n","  and find out best parameters to produce best results.\n","  \"\"\"\n","  learning_rates = [1e-3, 1e-4, 5e-5]\n","  weight_decays = [0, 1e-4, 1e-3]\n","  batch_sizes = [32, 64]\n","\n","  best_accuracy = 0\n","  best_params = {}\n","\n","  for lr in learning_rates:\n","      for wd in weight_decays:\n","          for bs in batch_sizes:\n","              logger.info(f\"Testing lr: {lr}, wd: {wd}, bs: {bs}\")\n","              df_train, df_validation = get_df_split()\n","              train_loader, test_loader = preprocessing(df_train, df_validation, batch_size=bs)\n","              # device, model, criterion, optimizer = create_pretrained_resnet50_model_and_components()\n","              model_config = ModelConfiguration(num_classes=5, learning_rate=lr, weight_decay=wd)\n","              trained_model = train_model(model_config, train_loader, num_epochs=20)\n","              accuracy, _, _ = evaluate_model(trained_model, test_loader)\n","              if accuracy > best_accuracy:\n","                  best_accuracy = accuracy\n","                  best_params = {'lr': lr, 'wd': wd, 'bs': bs}\n","              logger.info(f\"Accuracy: {accuracy:.4f}\\n\")\n","\n","  logger.info(f\"Best parameters: {best_params}\")\n","  logger.info(f\"Best validation accuracy: {best_accuracy:.4f}\")\n","  return best_params"]},{"cell_type":"code","execution_count":9,"id":"4c58cdb8","metadata":{"execution":{"iopub.execute_input":"2025-09-08T08:29:25.752857Z","iopub.status.busy":"2025-09-08T08:29:25.75266Z","iopub.status.idle":"2025-09-08T14:17:04.177312Z","shell.execute_reply":"2025-09-08T14:17:04.176717Z"},"id":"JTisxhHbJ6_Q","papermill":{"duration":20858.430501,"end_time":"2025-09-08T14:17:04.178505","exception":false,"start_time":"2025-09-08T08:29:25.748004","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["INFO:__main__:Testing lr: 0.001, wd: 0, bs: 32\n","INFO:__main__:Epoch 1, Loss: 0.8561\n","INFO:__main__:Epoch 2, Loss: 0.5182\n","INFO:__main__:Epoch 3, Loss: 0.4034\n","INFO:__main__:Epoch 4, Loss: 0.3566\n","INFO:__main__:Epoch 5, Loss: 0.2321\n","INFO:__main__:Epoch 6, Loss: 0.2680\n","INFO:__main__:Epoch 7, Loss: 0.1990\n","INFO:__main__:Epoch 8, Loss: 0.1650\n","INFO:__main__:Epoch 9, Loss: 0.1303\n","INFO:__main__:Epoch 10, Loss: 0.0957\n","INFO:__main__:Epoch 11, Loss: 0.1118\n","INFO:__main__:Epoch 12, Loss: 0.1811\n","INFO:__main__:Epoch 13, Loss: 0.0836\n","INFO:__main__:Epoch 14, Loss: 0.0520\n","INFO:__main__:Epoch 15, Loss: 0.1539\n","INFO:__main__:Epoch 16, Loss: 0.0785\n","INFO:__main__:Epoch 17, Loss: 0.1530\n","INFO:__main__:Epoch 18, Loss: 0.0606\n","INFO:__main__:Epoch 19, Loss: 0.0314\n","INFO:__main__:Epoch 20, Loss: 0.0335\n","INFO:__main__:Test Accuracy: 0.8568\n","INFO:__main__:              precision    recall  f1-score   support\n","\n","           0       0.90      0.88      0.89       250\n","           1       0.91      0.93      0.92       250\n","           2       0.85      0.86      0.86       250\n","           3       0.95      0.67      0.79       250\n","           4       0.74      0.94      0.83       250\n","\n","    accuracy                           0.86      1250\n","   macro avg       0.87      0.86      0.86      1250\n","weighted avg       0.87      0.86      0.86      1250\n","\n","INFO:__main__:Accuracy: 0.8568\n","\n","INFO:__main__:Testing lr: 0.001, wd: 0, bs: 64\n","INFO:__main__:Epoch 1, Loss: 0.8210\n","INFO:__main__:Epoch 2, Loss: 0.5020\n","INFO:__main__:Epoch 3, Loss: 0.4827\n","INFO:__main__:Epoch 4, Loss: 0.3558\n","INFO:__main__:Epoch 5, Loss: 0.2944\n","INFO:__main__:Epoch 6, Loss: 0.2360\n","INFO:__main__:Epoch 7, Loss: 0.1838\n","INFO:__main__:Epoch 8, Loss: 0.2074\n","INFO:__main__:Epoch 9, Loss: 0.1620\n","INFO:__main__:Epoch 10, Loss: 0.1300\n","INFO:__main__:Epoch 11, Loss: 0.1036\n","INFO:__main__:Epoch 12, Loss: 0.0979\n","INFO:__main__:Epoch 13, Loss: 0.1559\n","INFO:__main__:Epoch 14, Loss: 0.0829\n","INFO:__main__:Epoch 15, Loss: 0.0511\n","INFO:__main__:Epoch 16, Loss: 0.0965\n","INFO:__main__:Epoch 17, Loss: 0.0986\n","INFO:__main__:Epoch 18, Loss: 0.0378\n","INFO:__main__:Epoch 19, Loss: 0.0235\n","INFO:__main__:Epoch 20, Loss: 0.0511\n","INFO:__main__:Test Accuracy: 0.7896\n","INFO:__main__:              precision    recall  f1-score   support\n","\n","           0       0.84      0.77      0.80       250\n","           1       0.66      0.98      0.79       250\n","           2       0.92      0.75      0.83       250\n","           3       0.78      0.76      0.77       250\n","           4       0.85      0.70      0.76       250\n","\n","    accuracy                           0.79      1250\n","   macro avg       0.81      0.79      0.79      1250\n","weighted avg       0.81      0.79      0.79      1250\n","\n","INFO:__main__:Accuracy: 0.7896\n","\n","INFO:__main__:Testing lr: 0.001, wd: 0.0001, bs: 32\n","INFO:__main__:Epoch 1, Loss: 0.8596\n","INFO:__main__:Epoch 2, Loss: 0.5263\n","INFO:__main__:Epoch 3, Loss: 0.4248\n","INFO:__main__:Epoch 4, Loss: 0.3544\n","INFO:__main__:Epoch 5, Loss: 0.3213\n","INFO:__main__:Epoch 6, Loss: 0.2830\n","INFO:__main__:Epoch 7, Loss: 0.2199\n","INFO:__main__:Epoch 8, Loss: 0.1974\n","INFO:__main__:Epoch 9, Loss: 0.1867\n","INFO:__main__:Epoch 10, Loss: 0.1247\n","INFO:__main__:Epoch 11, Loss: 0.1241\n","INFO:__main__:Epoch 12, Loss: 0.1320\n","INFO:__main__:Epoch 13, Loss: 0.0882\n","INFO:__main__:Epoch 14, Loss: 0.1174\n","INFO:__main__:Epoch 15, Loss: 0.1248\n","INFO:__main__:Epoch 16, Loss: 0.1530\n","INFO:__main__:Epoch 17, Loss: 0.0826\n","INFO:__main__:Epoch 18, Loss: 0.0929\n","INFO:__main__:Epoch 19, Loss: 0.0694\n","INFO:__main__:Epoch 20, Loss: 0.0658\n","INFO:__main__:Test Accuracy: 0.8464\n","INFO:__main__:              precision    recall  f1-score   support\n","\n","           0       0.87      0.92      0.89       250\n","           1       0.83      0.94      0.88       250\n","           2       0.85      0.86      0.86       250\n","           3       0.81      0.80      0.80       250\n","           4       0.88      0.70      0.78       250\n","\n","    accuracy                           0.85      1250\n","   macro avg       0.85      0.85      0.84      1250\n","weighted avg       0.85      0.85      0.84      1250\n","\n","INFO:__main__:Accuracy: 0.8464\n","\n","INFO:__main__:Testing lr: 0.001, wd: 0.0001, bs: 64\n","INFO:__main__:Epoch 1, Loss: 0.8091\n","INFO:__main__:Epoch 2, Loss: 0.5552\n","INFO:__main__:Epoch 3, Loss: 0.3898\n","INFO:__main__:Epoch 4, Loss: 0.3980\n","INFO:__main__:Epoch 5, Loss: 0.2775\n","INFO:__main__:Epoch 6, Loss: 0.2346\n","INFO:__main__:Epoch 7, Loss: 0.2042\n","INFO:__main__:Epoch 8, Loss: 0.1572\n","INFO:__main__:Epoch 9, Loss: 0.2182\n","INFO:__main__:Epoch 10, Loss: 0.1881\n","INFO:__main__:Epoch 11, Loss: 0.1216\n","INFO:__main__:Epoch 12, Loss: 0.0636\n","INFO:__main__:Epoch 13, Loss: 0.1283\n","INFO:__main__:Epoch 14, Loss: 0.0907\n","INFO:__main__:Epoch 15, Loss: 0.1321\n","INFO:__main__:Epoch 16, Loss: 0.0924\n","INFO:__main__:Epoch 17, Loss: 0.0901\n","INFO:__main__:Epoch 18, Loss: 0.0826\n","INFO:__main__:Epoch 19, Loss: 0.0909\n","INFO:__main__:Epoch 20, Loss: 0.1016\n","INFO:__main__:Test Accuracy: 0.7944\n","INFO:__main__:              precision    recall  f1-score   support\n","\n","           0       0.94      0.83      0.88       250\n","           1       0.98      0.76      0.86       250\n","           2       0.72      0.85      0.78       250\n","           3       0.61      0.92      0.73       250\n","           4       0.94      0.62      0.75       250\n","\n","    accuracy                           0.79      1250\n","   macro avg       0.84      0.79      0.80      1250\n","weighted avg       0.84      0.79      0.80      1250\n","\n","INFO:__main__:Accuracy: 0.7944\n","\n","INFO:__main__:Testing lr: 0.001, wd: 0.001, bs: 32\n","INFO:__main__:Epoch 1, Loss: 0.8012\n","INFO:__main__:Epoch 2, Loss: 0.5653\n","INFO:__main__:Epoch 3, Loss: 0.4715\n","INFO:__main__:Epoch 4, Loss: 0.4330\n","INFO:__main__:Epoch 5, Loss: 0.4128\n","INFO:__main__:Epoch 6, Loss: 0.3646\n","INFO:__main__:Epoch 7, Loss: 0.3264\n","INFO:__main__:Epoch 8, Loss: 0.3025\n","INFO:__main__:Epoch 9, Loss: 0.2690\n","INFO:__main__:Epoch 10, Loss: 0.3020\n","INFO:__main__:Epoch 11, Loss: 0.2314\n","INFO:__main__:Epoch 12, Loss: 0.2377\n","INFO:__main__:Epoch 13, Loss: 0.2218\n","INFO:__main__:Epoch 14, Loss: 0.2253\n","INFO:__main__:Epoch 15, Loss: 0.1340\n","INFO:__main__:Epoch 16, Loss: 0.1145\n","INFO:__main__:Epoch 17, Loss: 0.2364\n","INFO:__main__:Epoch 18, Loss: 0.2515\n","INFO:__main__:Epoch 19, Loss: 0.1958\n","INFO:__main__:Epoch 20, Loss: 0.1152\n","INFO:__main__:Test Accuracy: 0.8408\n","INFO:__main__:              precision    recall  f1-score   support\n","\n","           0       0.78      0.94      0.85       250\n","           1       0.86      0.88      0.87       250\n","           2       0.87      0.83      0.85       250\n","           3       0.89      0.72      0.79       250\n","           4       0.83      0.84      0.84       250\n","\n","    accuracy                           0.84      1250\n","   macro avg       0.85      0.84      0.84      1250\n","weighted avg       0.85      0.84      0.84      1250\n","\n","INFO:__main__:Accuracy: 0.8408\n","\n","INFO:__main__:Testing lr: 0.001, wd: 0.001, bs: 64\n","INFO:__main__:Epoch 1, Loss: 0.8939\n","INFO:__main__:Epoch 2, Loss: 0.5524\n","INFO:__main__:Epoch 3, Loss: 0.4808\n","INFO:__main__:Epoch 4, Loss: 0.4705\n","INFO:__main__:Epoch 5, Loss: 0.4121\n","INFO:__main__:Epoch 6, Loss: 0.3467\n","INFO:__main__:Epoch 7, Loss: 0.3437\n","INFO:__main__:Epoch 8, Loss: 0.3399\n","INFO:__main__:Epoch 9, Loss: 0.2903\n","INFO:__main__:Epoch 10, Loss: 0.2873\n","INFO:__main__:Epoch 11, Loss: 0.2900\n","INFO:__main__:Epoch 12, Loss: 0.2220\n","INFO:__main__:Epoch 13, Loss: 0.2326\n","INFO:__main__:Epoch 14, Loss: 0.2357\n","INFO:__main__:Epoch 15, Loss: 0.2263\n","INFO:__main__:Epoch 16, Loss: 0.1734\n","INFO:__main__:Epoch 17, Loss: 0.1562\n","INFO:__main__:Epoch 18, Loss: 0.1688\n","INFO:__main__:Epoch 19, Loss: 0.1869\n","INFO:__main__:Epoch 20, Loss: 0.1802\n","INFO:__main__:Test Accuracy: 0.7888\n","INFO:__main__:              precision    recall  f1-score   support\n","\n","           0       0.76      0.90      0.82       250\n","           1       0.92      0.75      0.83       250\n","           2       0.68      0.85      0.75       250\n","           3       0.82      0.78      0.80       250\n","           4       0.84      0.66      0.74       250\n","\n","    accuracy                           0.79      1250\n","   macro avg       0.80      0.79      0.79      1250\n","weighted avg       0.80      0.79      0.79      1250\n","\n","INFO:__main__:Accuracy: 0.7888\n","\n","INFO:__main__:Testing lr: 0.0001, wd: 0, bs: 32\n","INFO:__main__:Epoch 1, Loss: 0.5392\n","INFO:__main__:Epoch 2, Loss: 0.1079\n","INFO:__main__:Epoch 3, Loss: 0.0358\n","INFO:__main__:Epoch 4, Loss: 0.0174\n","INFO:__main__:Epoch 5, Loss: 0.0155\n","INFO:__main__:Epoch 6, Loss: 0.0267\n","INFO:__main__:Epoch 7, Loss: 0.0337\n","INFO:__main__:Epoch 8, Loss: 0.0331\n","INFO:__main__:Epoch 9, Loss: 0.0309\n","INFO:__main__:Epoch 10, Loss: 0.0234\n","INFO:__main__:Epoch 11, Loss: 0.0180\n","INFO:__main__:Epoch 12, Loss: 0.0137\n","INFO:__main__:Epoch 13, Loss: 0.0073\n","INFO:__main__:Epoch 14, Loss: 0.0127\n","INFO:__main__:Epoch 15, Loss: 0.0049\n","INFO:__main__:Epoch 16, Loss: 0.0148\n","INFO:__main__:Epoch 17, Loss: 0.0174\n","INFO:__main__:Epoch 18, Loss: 0.0117\n","INFO:__main__:Epoch 19, Loss: 0.0138\n","INFO:__main__:Epoch 20, Loss: 0.0051\n","INFO:__main__:Test Accuracy: 0.9448\n","INFO:__main__:              precision    recall  f1-score   support\n","\n","           0       0.97      0.97      0.97       250\n","           1       0.96      0.98      0.97       250\n","           2       0.96      0.91      0.93       250\n","           3       0.90      0.95      0.93       250\n","           4       0.93      0.92      0.93       250\n","\n","    accuracy                           0.94      1250\n","   macro avg       0.95      0.94      0.94      1250\n","weighted avg       0.95      0.94      0.94      1250\n","\n","INFO:__main__:Accuracy: 0.9448\n","\n","INFO:__main__:Testing lr: 0.0001, wd: 0, bs: 64\n","INFO:__main__:Epoch 1, Loss: 0.5151\n","INFO:__main__:Epoch 2, Loss: 0.1074\n","INFO:__main__:Epoch 3, Loss: 0.0395\n","INFO:__main__:Epoch 4, Loss: 0.0211\n","INFO:__main__:Epoch 5, Loss: 0.0125\n","INFO:__main__:Epoch 6, Loss: 0.0233\n","INFO:__main__:Epoch 7, Loss: 0.0336\n","INFO:__main__:Epoch 8, Loss: 0.0270\n","INFO:__main__:Epoch 9, Loss: 0.0304\n","INFO:__main__:Epoch 10, Loss: 0.0316\n","INFO:__main__:Epoch 11, Loss: 0.0223\n","INFO:__main__:Epoch 12, Loss: 0.0194\n","INFO:__main__:Epoch 13, Loss: 0.0188\n","INFO:__main__:Epoch 14, Loss: 0.0074\n","INFO:__main__:Epoch 15, Loss: 0.0034\n","INFO:__main__:Epoch 16, Loss: 0.0029\n","INFO:__main__:Epoch 17, Loss: 0.0027\n","INFO:__main__:Epoch 18, Loss: 0.0014\n","INFO:__main__:Epoch 19, Loss: 0.0011\n","INFO:__main__:Epoch 20, Loss: 0.0010\n","INFO:__main__:Test Accuracy: 0.9576\n","INFO:__main__:              precision    recall  f1-score   support\n","\n","           0       0.98      0.98      0.98       250\n","           1       0.98      0.99      0.99       250\n","           2       0.97      0.93      0.95       250\n","           3       0.94      0.94      0.94       250\n","           4       0.93      0.94      0.93       250\n","\n","    accuracy                           0.96      1250\n","   macro avg       0.96      0.96      0.96      1250\n","weighted avg       0.96      0.96      0.96      1250\n","\n","INFO:__main__:Accuracy: 0.9576\n","\n","INFO:__main__:Testing lr: 0.0001, wd: 0.0001, bs: 32\n","INFO:__main__:Epoch 1, Loss: 0.5107\n","INFO:__main__:Epoch 2, Loss: 0.1111\n","INFO:__main__:Epoch 3, Loss: 0.0344\n","INFO:__main__:Epoch 4, Loss: 0.0078\n","INFO:__main__:Epoch 5, Loss: 0.0064\n","INFO:__main__:Epoch 6, Loss: 0.0176\n","INFO:__main__:Epoch 7, Loss: 0.0510\n","INFO:__main__:Epoch 8, Loss: 0.0458\n","INFO:__main__:Epoch 9, Loss: 0.0246\n","INFO:__main__:Epoch 10, Loss: 0.0255\n","INFO:__main__:Epoch 11, Loss: 0.0247\n","INFO:__main__:Epoch 12, Loss: 0.0232\n","INFO:__main__:Epoch 13, Loss: 0.0139\n","INFO:__main__:Epoch 14, Loss: 0.0105\n","INFO:__main__:Epoch 15, Loss: 0.0073\n","INFO:__main__:Epoch 16, Loss: 0.0051\n","INFO:__main__:Epoch 17, Loss: 0.0043\n","INFO:__main__:Epoch 18, Loss: 0.0158\n","INFO:__main__:Epoch 19, Loss: 0.0194\n","INFO:__main__:Epoch 20, Loss: 0.0345\n","INFO:__main__:Test Accuracy: 0.9344\n","INFO:__main__:              precision    recall  f1-score   support\n","\n","           0       0.93      0.98      0.95       250\n","           1       0.98      0.95      0.96       250\n","           2       0.93      0.94      0.94       250\n","           3       0.90      0.94      0.92       250\n","           4       0.94      0.86      0.90       250\n","\n","    accuracy                           0.93      1250\n","   macro avg       0.93      0.93      0.93      1250\n","weighted avg       0.93      0.93      0.93      1250\n","\n","INFO:__main__:Accuracy: 0.9344\n","\n","INFO:__main__:Testing lr: 0.0001, wd: 0.0001, bs: 64\n","INFO:__main__:Epoch 1, Loss: 0.5313\n","INFO:__main__:Epoch 2, Loss: 0.0991\n","INFO:__main__:Epoch 3, Loss: 0.0346\n","INFO:__main__:Epoch 4, Loss: 0.0134\n","INFO:__main__:Epoch 5, Loss: 0.0099\n","INFO:__main__:Epoch 6, Loss: 0.0195\n","INFO:__main__:Epoch 7, Loss: 0.0502\n","INFO:__main__:Epoch 8, Loss: 0.0459\n","INFO:__main__:Epoch 9, Loss: 0.0371\n","INFO:__main__:Epoch 10, Loss: 0.0219\n","INFO:__main__:Epoch 11, Loss: 0.0246\n","INFO:__main__:Epoch 12, Loss: 0.0178\n","INFO:__main__:Epoch 13, Loss: 0.0124\n","INFO:__main__:Epoch 14, Loss: 0.0086\n","INFO:__main__:Epoch 15, Loss: 0.0052\n","INFO:__main__:Epoch 16, Loss: 0.0055\n","INFO:__main__:Epoch 17, Loss: 0.0019\n","INFO:__main__:Epoch 18, Loss: 0.0015\n","INFO:__main__:Epoch 19, Loss: 0.0006\n","INFO:__main__:Epoch 20, Loss: 0.0007\n","INFO:__main__:Test Accuracy: 0.9616\n","INFO:__main__:              precision    recall  f1-score   support\n","\n","           0       0.98      0.99      0.99       250\n","           1       0.99      0.99      0.99       250\n","           2       0.93      0.95      0.94       250\n","           3       0.96      0.94      0.95       250\n","           4       0.94      0.93      0.94       250\n","\n","    accuracy                           0.96      1250\n","   macro avg       0.96      0.96      0.96      1250\n","weighted avg       0.96      0.96      0.96      1250\n","\n","INFO:__main__:Accuracy: 0.9616\n","\n","INFO:__main__:Testing lr: 0.0001, wd: 0.001, bs: 32\n","INFO:__main__:Epoch 1, Loss: 0.5299\n","INFO:__main__:Epoch 2, Loss: 0.0991\n","INFO:__main__:Epoch 3, Loss: 0.0330\n","INFO:__main__:Epoch 4, Loss: 0.0266\n","INFO:__main__:Epoch 5, Loss: 0.0357\n","INFO:__main__:Epoch 6, Loss: 0.0397\n","INFO:__main__:Epoch 7, Loss: 0.0294\n","INFO:__main__:Epoch 8, Loss: 0.0279\n","INFO:__main__:Epoch 9, Loss: 0.0287\n","INFO:__main__:Epoch 10, Loss: 0.0389\n","INFO:__main__:Epoch 11, Loss: 0.0261\n","INFO:__main__:Epoch 12, Loss: 0.0202\n","INFO:__main__:Epoch 13, Loss: 0.0190\n","INFO:__main__:Epoch 14, Loss: 0.0139\n","INFO:__main__:Epoch 15, Loss: 0.0110\n","INFO:__main__:Epoch 16, Loss: 0.0149\n","INFO:__main__:Epoch 17, Loss: 0.0313\n","INFO:__main__:Epoch 18, Loss: 0.0351\n","INFO:__main__:Epoch 19, Loss: 0.0313\n","INFO:__main__:Epoch 20, Loss: 0.0131\n","INFO:__main__:Test Accuracy: 0.9344\n","INFO:__main__:              precision    recall  f1-score   support\n","\n","           0       0.97      0.95      0.96       250\n","           1       0.97      0.95      0.96       250\n","           2       0.91      0.94      0.93       250\n","           3       0.87      0.93      0.90       250\n","           4       0.95      0.90      0.93       250\n","\n","    accuracy                           0.93      1250\n","   macro avg       0.94      0.93      0.93      1250\n","weighted avg       0.94      0.93      0.93      1250\n","\n","INFO:__main__:Accuracy: 0.9344\n","\n","INFO:__main__:Testing lr: 0.0001, wd: 0.001, bs: 64\n","INFO:__main__:Epoch 1, Loss: 0.5499\n","INFO:__main__:Epoch 2, Loss: 0.1207\n","INFO:__main__:Epoch 3, Loss: 0.0271\n","INFO:__main__:Epoch 4, Loss: 0.0086\n","INFO:__main__:Epoch 5, Loss: 0.0048\n","INFO:__main__:Epoch 6, Loss: 0.0163\n","INFO:__main__:Epoch 7, Loss: 0.0377\n","INFO:__main__:Epoch 8, Loss: 0.1135\n","INFO:__main__:Epoch 9, Loss: 0.0488\n","INFO:__main__:Epoch 10, Loss: 0.0404\n","INFO:__main__:Epoch 11, Loss: 0.0174\n","INFO:__main__:Epoch 12, Loss: 0.0096\n","INFO:__main__:Epoch 13, Loss: 0.0106\n","INFO:__main__:Epoch 14, Loss: 0.0079\n","INFO:__main__:Epoch 15, Loss: 0.0078\n","INFO:__main__:Epoch 16, Loss: 0.0042\n","INFO:__main__:Epoch 17, Loss: 0.0132\n","INFO:__main__:Epoch 18, Loss: 0.0232\n","INFO:__main__:Epoch 19, Loss: 0.0269\n","INFO:__main__:Epoch 20, Loss: 0.0439\n","INFO:__main__:Test Accuracy: 0.9352\n","INFO:__main__:              precision    recall  f1-score   support\n","\n","           0       0.99      0.94      0.96       250\n","           1       0.97      0.96      0.97       250\n","           2       0.93      0.93      0.93       250\n","           3       0.95      0.89      0.92       250\n","           4       0.85      0.96      0.90       250\n","\n","    accuracy                           0.94      1250\n","   macro avg       0.94      0.94      0.94      1250\n","weighted avg       0.94      0.94      0.94      1250\n","\n","INFO:__main__:Accuracy: 0.9352\n","\n","INFO:__main__:Testing lr: 5e-05, wd: 0, bs: 32\n","INFO:__main__:Epoch 1, Loss: 0.6496\n","INFO:__main__:Epoch 2, Loss: 0.1436\n","INFO:__main__:Epoch 3, Loss: 0.0383\n","INFO:__main__:Epoch 4, Loss: 0.0128\n","INFO:__main__:Epoch 5, Loss: 0.0077\n","INFO:__main__:Epoch 6, Loss: 0.0055\n","INFO:__main__:Epoch 7, Loss: 0.0177\n","INFO:__main__:Epoch 8, Loss: 0.0230\n","INFO:__main__:Epoch 9, Loss: 0.0141\n","INFO:__main__:Epoch 10, Loss: 0.0099\n","INFO:__main__:Epoch 11, Loss: 0.0226\n","INFO:__main__:Epoch 12, Loss: 0.0077\n","INFO:__main__:Epoch 13, Loss: 0.0026\n","INFO:__main__:Epoch 14, Loss: 0.0013\n","INFO:__main__:Epoch 15, Loss: 0.0012\n","INFO:__main__:Epoch 16, Loss: 0.0019\n","INFO:__main__:Epoch 17, Loss: 0.0010\n","INFO:__main__:Epoch 18, Loss: 0.0010\n","INFO:__main__:Epoch 19, Loss: 0.0009\n","INFO:__main__:Epoch 20, Loss: 0.0060\n","INFO:__main__:Test Accuracy: 0.9448\n","INFO:__main__:              precision    recall  f1-score   support\n","\n","           0       0.96      0.98      0.97       250\n","           1       0.98      0.98      0.98       250\n","           2       0.93      0.90      0.91       250\n","           3       0.94      0.95      0.94       250\n","           4       0.91      0.91      0.91       250\n","\n","    accuracy                           0.94      1250\n","   macro avg       0.94      0.94      0.94      1250\n","weighted avg       0.94      0.94      0.94      1250\n","\n","INFO:__main__:Accuracy: 0.9448\n","\n","INFO:__main__:Testing lr: 5e-05, wd: 0, bs: 64\n","INFO:__main__:Epoch 1, Loss: 0.6549\n","INFO:__main__:Epoch 2, Loss: 0.1468\n","INFO:__main__:Epoch 3, Loss: 0.0421\n","INFO:__main__:Epoch 4, Loss: 0.0165\n","INFO:__main__:Epoch 5, Loss: 0.0077\n","INFO:__main__:Epoch 6, Loss: 0.0062\n","INFO:__main__:Epoch 7, Loss: 0.0038\n","INFO:__main__:Epoch 8, Loss: 0.0023\n","INFO:__main__:Epoch 9, Loss: 0.0017\n","INFO:__main__:Epoch 10, Loss: 0.0074\n","INFO:__main__:Epoch 11, Loss: 0.0057\n","INFO:__main__:Epoch 12, Loss: 0.0231\n","INFO:__main__:Epoch 13, Loss: 0.0348\n","INFO:__main__:Epoch 14, Loss: 0.0228\n","INFO:__main__:Epoch 15, Loss: 0.0105\n","INFO:__main__:Epoch 16, Loss: 0.0071\n","INFO:__main__:Epoch 17, Loss: 0.0045\n","INFO:__main__:Epoch 18, Loss: 0.0016\n","INFO:__main__:Epoch 19, Loss: 0.0008\n","INFO:__main__:Epoch 20, Loss: 0.0029\n","INFO:__main__:Test Accuracy: 0.9408\n","INFO:__main__:              precision    recall  f1-score   support\n","\n","           0       0.95      0.98      0.96       250\n","           1       0.98      0.98      0.98       250\n","           2       0.96      0.92      0.94       250\n","           3       0.92      0.93      0.92       250\n","           4       0.90      0.90      0.90       250\n","\n","    accuracy                           0.94      1250\n","   macro avg       0.94      0.94      0.94      1250\n","weighted avg       0.94      0.94      0.94      1250\n","\n","INFO:__main__:Accuracy: 0.9408\n","\n","INFO:__main__:Testing lr: 5e-05, wd: 0.0001, bs: 32\n","INFO:__main__:Epoch 1, Loss: 0.6562\n","INFO:__main__:Epoch 2, Loss: 0.1473\n","INFO:__main__:Epoch 3, Loss: 0.0366\n","INFO:__main__:Epoch 4, Loss: 0.0186\n","INFO:__main__:Epoch 5, Loss: 0.0078\n","INFO:__main__:Epoch 6, Loss: 0.0067\n","INFO:__main__:Epoch 7, Loss: 0.0036\n","INFO:__main__:Epoch 8, Loss: 0.0031\n","INFO:__main__:Epoch 9, Loss: 0.0031\n","INFO:__main__:Epoch 10, Loss: 0.0022\n","INFO:__main__:Epoch 11, Loss: 0.0015\n","INFO:__main__:Epoch 12, Loss: 0.0072\n","INFO:__main__:Epoch 13, Loss: 0.0072\n","INFO:__main__:Epoch 14, Loss: 0.0212\n","INFO:__main__:Epoch 15, Loss: 0.0549\n","INFO:__main__:Epoch 16, Loss: 0.0372\n","INFO:__main__:Epoch 17, Loss: 0.0158\n","INFO:__main__:Epoch 18, Loss: 0.0090\n","INFO:__main__:Epoch 19, Loss: 0.0047\n","INFO:__main__:Epoch 20, Loss: 0.0058\n","INFO:__main__:Test Accuracy: 0.9448\n","INFO:__main__:              precision    recall  f1-score   support\n","\n","           0       0.96      0.98      0.97       250\n","           1       0.98      0.98      0.98       250\n","           2       0.92      0.92      0.92       250\n","           3       0.95      0.91      0.93       250\n","           4       0.92      0.92      0.92       250\n","\n","    accuracy                           0.94      1250\n","   macro avg       0.94      0.94      0.94      1250\n","weighted avg       0.94      0.94      0.94      1250\n","\n","INFO:__main__:Accuracy: 0.9448\n","\n","INFO:__main__:Testing lr: 5e-05, wd: 0.0001, bs: 64\n","INFO:__main__:Epoch 1, Loss: 0.6658\n","INFO:__main__:Epoch 2, Loss: 0.1468\n","INFO:__main__:Epoch 3, Loss: 0.0325\n","INFO:__main__:Epoch 4, Loss: 0.0126\n","INFO:__main__:Epoch 5, Loss: 0.0066\n","INFO:__main__:Epoch 6, Loss: 0.0039\n","INFO:__main__:Epoch 7, Loss: 0.0030\n","INFO:__main__:Epoch 8, Loss: 0.0023\n","INFO:__main__:Epoch 9, Loss: 0.0020\n","INFO:__main__:Epoch 10, Loss: 0.0015\n","INFO:__main__:Epoch 11, Loss: 0.0012\n","INFO:__main__:Epoch 12, Loss: 0.0029\n","INFO:__main__:Epoch 13, Loss: 0.0294\n","INFO:__main__:Epoch 14, Loss: 0.0599\n","INFO:__main__:Epoch 15, Loss: 0.0348\n","INFO:__main__:Epoch 16, Loss: 0.0167\n","INFO:__main__:Epoch 17, Loss: 0.0065\n","INFO:__main__:Epoch 18, Loss: 0.0039\n","INFO:__main__:Epoch 19, Loss: 0.0051\n","INFO:__main__:Epoch 20, Loss: 0.0034\n","INFO:__main__:Test Accuracy: 0.9536\n","INFO:__main__:              precision    recall  f1-score   support\n","\n","           0       0.94      0.98      0.96       250\n","           1       0.97      0.98      0.98       250\n","           2       0.96      0.94      0.95       250\n","           3       0.95      0.92      0.94       250\n","           4       0.95      0.94      0.94       250\n","\n","    accuracy                           0.95      1250\n","   macro avg       0.95      0.95      0.95      1250\n","weighted avg       0.95      0.95      0.95      1250\n","\n","INFO:__main__:Accuracy: 0.9536\n","\n","INFO:__main__:Testing lr: 5e-05, wd: 0.001, bs: 32\n","INFO:__main__:Epoch 1, Loss: 0.6537\n","INFO:__main__:Epoch 2, Loss: 0.1540\n","INFO:__main__:Epoch 3, Loss: 0.0406\n","INFO:__main__:Epoch 4, Loss: 0.0118\n","INFO:__main__:Epoch 5, Loss: 0.0094\n","INFO:__main__:Epoch 6, Loss: 0.0058\n","INFO:__main__:Epoch 7, Loss: 0.0091\n","INFO:__main__:Epoch 8, Loss: 0.0123\n","INFO:__main__:Epoch 9, Loss: 0.0183\n","INFO:__main__:Epoch 10, Loss: 0.0303\n","INFO:__main__:Epoch 11, Loss: 0.0181\n","INFO:__main__:Epoch 12, Loss: 0.0082\n","INFO:__main__:Epoch 13, Loss: 0.0131\n","INFO:__main__:Epoch 14, Loss: 0.0048\n","INFO:__main__:Epoch 15, Loss: 0.0050\n","INFO:__main__:Epoch 16, Loss: 0.0044\n","INFO:__main__:Epoch 17, Loss: 0.0021\n","INFO:__main__:Epoch 18, Loss: 0.0018\n","INFO:__main__:Epoch 19, Loss: 0.0043\n","INFO:__main__:Epoch 20, Loss: 0.0057\n","INFO:__main__:Test Accuracy: 0.9504\n","INFO:__main__:              precision    recall  f1-score   support\n","\n","           0       0.98      0.98      0.98       250\n","           1       0.97      0.97      0.97       250\n","           2       0.93      0.92      0.93       250\n","           3       0.93      0.93      0.93       250\n","           4       0.94      0.95      0.94       250\n","\n","    accuracy                           0.95      1250\n","   macro avg       0.95      0.95      0.95      1250\n","weighted avg       0.95      0.95      0.95      1250\n","\n","INFO:__main__:Accuracy: 0.9504\n","\n","INFO:__main__:Testing lr: 5e-05, wd: 0.001, bs: 64\n","INFO:__main__:Epoch 1, Loss: 0.6764\n","INFO:__main__:Epoch 2, Loss: 0.1411\n","INFO:__main__:Epoch 3, Loss: 0.0370\n","INFO:__main__:Epoch 4, Loss: 0.0132\n","INFO:__main__:Epoch 5, Loss: 0.0071\n","INFO:__main__:Epoch 6, Loss: 0.0041\n","INFO:__main__:Epoch 7, Loss: 0.0042\n","INFO:__main__:Epoch 8, Loss: 0.0037\n","INFO:__main__:Epoch 9, Loss: 0.0267\n","INFO:__main__:Epoch 10, Loss: 0.0278\n","INFO:__main__:Epoch 11, Loss: 0.0326\n","INFO:__main__:Epoch 12, Loss: 0.0325\n","INFO:__main__:Epoch 13, Loss: 0.0228\n","INFO:__main__:Epoch 14, Loss: 0.0090\n","INFO:__main__:Epoch 15, Loss: 0.0092\n","INFO:__main__:Epoch 16, Loss: 0.0072\n","INFO:__main__:Epoch 17, Loss: 0.0079\n","INFO:__main__:Epoch 18, Loss: 0.0058\n","INFO:__main__:Epoch 19, Loss: 0.0066\n","INFO:__main__:Epoch 20, Loss: 0.0086\n","INFO:__main__:Test Accuracy: 0.9432\n","INFO:__main__:              precision    recall  f1-score   support\n","\n","           0       0.97      0.98      0.97       250\n","           1       0.97      0.98      0.97       250\n","           2       0.95      0.94      0.94       250\n","           3       0.96      0.88      0.91       250\n","           4       0.88      0.95      0.91       250\n","\n","    accuracy                           0.94      1250\n","   macro avg       0.94      0.94      0.94      1250\n","weighted avg       0.94      0.94      0.94      1250\n","\n","INFO:__main__:Accuracy: 0.9432\n","\n","INFO:__main__:Best parameters: {'lr': 0.0001, 'wd': 0.0001, 'bs': 64}\n","INFO:__main__:Best validation accuracy: 0.9616\n"]}],"source":["best_params = hyperparameter_tuning()"]},{"cell_type":"code","execution_count":10,"id":"43df5000","metadata":{"execution":{"iopub.execute_input":"2025-09-08T14:17:04.220639Z","iopub.status.busy":"2025-09-08T14:17:04.220421Z","iopub.status.idle":"2025-09-08T14:19:18.106619Z","shell.execute_reply":"2025-09-08T14:19:18.105865Z"},"id":"kT-nlryvjR_B","papermill":{"duration":133.908073,"end_time":"2025-09-08T14:19:18.107758","exception":false,"start_time":"2025-09-08T14:17:04.199685","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["INFO:__main__:Epoch 1, Loss: 0.5411\n","INFO:__main__:Epoch 2, Loss: 0.1086\n","INFO:__main__:Test Accuracy: 0.9464\n","INFO:__main__:              precision    recall  f1-score   support\n","\n","           0       0.98      0.98      0.98       250\n","           1       0.97      1.00      0.98       250\n","           2       0.91      0.93      0.92       250\n","           3       0.92      0.96      0.94       250\n","           4       0.96      0.87      0.91       250\n","\n","    accuracy                           0.95      1250\n","   macro avg       0.95      0.95      0.95      1250\n","weighted avg       0.95      0.95      0.95      1250\n","\n","INFO:__main__:Final test accuracy with tuned parameters: 0.9464\n"]}],"source":["# Use the best hyperparameters to train your final model\n","best_lr = best_params['lr']\n","best_wd = best_params['wd']\n","best_bs = best_params['bs']\n","\n","df_train, df_validation = get_df_split()\n","train_loader, test_loader = preprocessing(df_train, df_validation, batch_size=best_bs)\n","\n","# Initialize model and optimizer\n","model_config = ModelConfiguration(learning_rate=best_lr, weight_decay=best_wd)\n","trained_model = train_model(model_config, train_loader, num_epochs=2)\n","\n","final_accuracy, _, _ = evaluate_model(trained_model, test_loader)\n","logger.info(f\"Final test accuracy with tuned parameters: {final_accuracy:.4f}\")"]}],"metadata":{"colab":{"provenance":[]},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[],"dockerImageVersionId":31090,"isGpuEnabled":true,"isInternetEnabled":true,"language":"python","sourceType":"notebook"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.11.13"},"papermill":{"default_parameters":{},"duration":22179.088984,"end_time":"2025-09-08T14:19:21.364976","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2025-09-08T08:09:42.275992","version":"2.6.0"}},"nbformat":4,"nbformat_minor":5}